name: Vercel Deployment Pipeline

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main
    paths:
      - 'components/**'
      - 'pages/**'
      - 'styles/**'
      - 'types/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.js'
      - 'tsconfig.json'
      - 'tailwind.config.js'
      - 'postcss.config.js'
      - 'vercel.json'
  
  pull_request:
    branches:
      - main
    paths:
      - 'components/**'
      - 'pages/**'
      - 'styles/**'
      - 'types/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.js'
      - 'tsconfig.json'
      - 'tailwind.config.js'
      - 'postcss.config.js'
      - 'vercel.json'

jobs:
  # Pre-deployment checks
  quality-gate:
    runs-on: ubuntu-latest
    name: Quality Gate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      
      - name: TypeScript type check
        run: npm run type-check
      
      - name: ESLint check
        run: npm run lint
      
      - name: Frontend tests
        run: npm run test:ci
      
      - name: Build verification
        run: npm run build
        env:
          NODE_ENV: production

  # Vercel Preview Deployment (for PRs)
  vercel-preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: quality-gate
    name: Preview Deployment
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: production
      
      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT
          echo "Preview URL: $url"
      
      - name: Run Lighthouse on Preview
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ steps.deploy.outputs.preview_url }}
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      - name: Update PR with deployment info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üöÄ Vercel Preview Deployment')
            );

            const previewUrl = '${{ steps.deploy.outputs.preview_url }}';
            const commitSha = context.sha.substring(0, 7);
            
            const body = `üöÄ **Vercel Preview Deployment**
            
            ‚úÖ **Status:** Successfully deployed
            üîó **Preview URL:** ${previewUrl}
            üìù **Commit:** ${commitSha}
            üèóÔ∏è **Environment:** Preview
            
            ### What's included:
            - ‚úÖ TypeScript type checking passed
            - ‚úÖ ESLint validation passed  
            - ‚úÖ All tests passed
            - ‚úÖ Build completed successfully
            - ‚úÖ Lighthouse audit completed
            
            The preview will be automatically updated with new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Vercel Production Deployment (for main branch)
  vercel-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: quality-gate
    name: Production Deployment
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: production
      
      - name: Deploy to Vercel Production
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT
          echo "Production URL: $url"
      
      - name: Run Production Lighthouse Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ steps.deploy.outputs.production_url }}
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## üöÄ Production Deployment
            
            **üîó Live URL:** ${{ steps.deploy.outputs.production_url }}
            **üìù Commit:** ${{ github.sha }}
            **üèóÔ∏è Environment:** Production
            **üìä Build Number:** ${{ github.run_number }}
            
            ### Features in this release:
            - Latest frontend improvements
            - All tests passing
            - Lighthouse audit completed
            - Security checks passed
          draft: false
          prerelease: false
      
      - name: Create deployment summary
        run: |
          echo "## üéâ Production Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üîó Production URL:** ${{ steps.deploy.outputs.production_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**üìù Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**üèóÔ∏è Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**üìä Build Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**üïê Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Quality Checks Passed:" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript compilation" >> $GITHUB_STEP_SUMMARY
          echo "- ESLint validation" >> $GITHUB_STEP_SUMMARY
          echo "- All frontend tests" >> $GITHUB_STEP_SUMMARY
          echo "- Production build" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse audit" >> $GITHUB_STEP_SUMMARY

  # Post-deployment monitoring  
  post-deployment:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: vercel-production
    name: Post-Deployment Monitoring
    
    steps:
      - name: Health Check
        run: |
          sleep 30  # Wait for deployment to stabilize
          curl -f ${{ needs.vercel-production.outputs.production_url }}/api/health || exit 1
      
      - name: Notify Slack (Success)
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "üéâ AutoVal successfully deployed to production!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Notify Slack (Failure)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "‚ùå AutoVal production deployment failed!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
