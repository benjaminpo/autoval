name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run Frontend Tests
      run: npm run test:coverage
    
    - name: Upload Frontend Coverage
      uses: codecov/codecov-action@v4
      with:
        flags: frontend
        directory: ./coverage
        fail_ci_if_error: false

  test-backend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Run Backend Tests
      run: |
        cd backend
        python -m pytest -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload Backend Coverage
      uses: codecov/codecov-action@v4
      with:
        flags: backend
        directory: ./backend
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Frontend dependencies
      run: npm ci
    
    - name: Install Backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Build Frontend
      run: npm run build
    
    - name: Run Integration Tests
      run: |
        cd backend
        python -m pytest test_integration.py -v
    
    - name: Run Complete Test Suite
      run: python run_tests.py

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install safety
      run: pip install safety
    
    - name: Run Python security scan
      run: safety check -r backend/requirements.txt
      continue-on-error: true

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        npm ci
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    
    - name: Build application
      run: npm run build
    
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
    
    - name: Deploy to Vercel Preview
      id: vercel-preview
      run: |
        URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$URL" >> $GITHUB_OUTPUT
        echo "🚀 Staging deployment completed!"
        echo "🌐 Preview URL: $URL"
    
    - name: Comment PR with Preview URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Staging Deployment Ready!**\n\n📱 **Preview URL:** ${{ steps.vercel-preview.outputs.url }}\n🔧 **Backend:** https://autoval-backend.onrender.com\n\n*This preview will be updated with each commit.*`
          })
    
    env:
      NODE_ENV: staging
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-backend-production:
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    
    - name: Run Backend Tests (Final Check)
      run: |
        cd backend
        python -m pytest -v --tb=short
    
    - name: Deploy Backend to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
    
    - name: Verify Backend Deployment
      run: |
        echo "🔍 Verifying backend deployment..."
        sleep 30  # Wait for service to start
        curl -f https://autoval-backend.onrender.com/api/health || echo "⚠️  Backend health check failed"
    
    - name: Notify Backend Deployment Success
      run: |
        echo "✅ Backend deployed successfully to Render!"
        echo "🌐 Backend URL: https://autoval-backend.onrender.com"
    
    env:
      NODE_ENV: production

  deploy-frontend-production:
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan, deploy-backend-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run Frontend Tests (Final Check)
      run: npm run test
    
    - name: Run ESLint (Final Check)
      run: npm run lint
    
    - name: Build application
      run: npm run build
    
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy to Vercel
      id: vercel-deploy
      run: |
        URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$URL" >> $GITHUB_OUTPUT
        echo "✅ Frontend deployed successfully!"
        echo "🌐 Frontend URL: $URL"
    
    - name: Verify Frontend Deployment
      run: |
        echo "🔍 Verifying frontend deployment..."
        curl -f ${{ steps.vercel-deploy.outputs.url }} || echo "⚠️  Frontend health check failed"
    
    - name: Update Deployment Status
      run: |
        echo "🚀 Full-stack deployment completed!"
        echo "📱 Frontend: ${{ steps.vercel-deploy.outputs.url }}"
        echo "🔧 Backend: https://autoval-backend.onrender.com"
    
    env:
      NODE_ENV: production
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
